name: Deploy

on:
  push:
    branches: [ "master", "main" ]   # main'e push → staging deploy
  workflow_dispatch:       # elle tetikleme (prod/staging seçimi için)

jobs:
  deploy-staging:
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    concurrency:
      group: cargo-hub-stg
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4

      # --- Render .env from staging secrets (masking values in logs) ---
      - name: Render .env (staging)
        run: |
          cat > .env << 'EOF'
          ASPNETCORE_ENVIRONMENT=${{ secrets.ASPNETCORE_ENVIRONMENT }}
          API_PORT=${{ secrets.API_PORT }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}
          PGUSER=
          PGDATABASE=
          PGPASSWORD=
          EOF
          # Show masked key names only
          awk 'BEGIN{FS="="}{printf "%-24s = ****\n",$1}' .env

      # --- SSH key setup ---
      - name: Setup SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          install -m 700 -d ~/.ssh
          printf "%s" "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          printf "Host *\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
          ssh -o BatchMode=yes ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }} "echo SSH OK"

      # --- Ensure staging dir structure on server ---
      - name: Ensure /opt/cargo-hub-stg structure
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }} "\
            sudo mkdir -p /opt/cargo-hub-stg/app /opt/cargo-hub-stg/data/postgres /opt/cargo-hub-stg/data/rabbitmq /opt/cargo-hub-stg/logs && \
            sudo chmod 700 /opt/cargo-hub-stg /opt/cargo-hub-stg/app && \
            sudo chmod 750 /opt/cargo-hub-stg/data /opt/cargo-hub-stg/data/postgres /opt/cargo-hub-stg/data/rabbitmq /opt/cargo-hub-stg/logs && \
            sudo touch /opt/cargo-hub-stg/.env && sudo chmod 600 /opt/cargo-hub-stg/.env"

      # --- Postgres data dir ownership (prevents init crash/unhealthy) ---
      - name: Fix Postgres data dir ownership
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }} "sudo chown -R 999:999 /opt/cargo-hub-stg/data/postgres || true"

      - name: Copy .env to server (/opt/cargo-hub-stg)
        run: |
          scp -o StrictHostKeyChecking=no .env ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }}:/opt/cargo-hub-stg/.env
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }} "chmod 600 /opt/cargo-hub-stg/.env"

      - name: Compose up (staging)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }} "\
            cd /opt/cargo-hub-stg && \
            docker compose -p cargo-hub-stg --env-file ./.env -f ./docker-compose.yml up -d --remove-orphans && \
            docker compose -p cargo-hub-stg ps"

      # --- Health check and short logs ---
      - name: Health check
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }} "bash -lc '
            # TCP probe (no subshells to avoid parsing issues)
            if exec 3<>/dev/tcp/localhost/8081; then
              echo TCP 8081: OK
              exec 3<&-; exec 3>&-
            else
              echo TCP 8081: FAIL
            fi

            # HTTP probe (accept 200/301/302/404 as OK)
            code=\$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8081/healthz || true)
            case \"\$code\" in
              200|301|302|404) echo \"healthz HTTP \$code (OK)\" ;;
              *) echo \"healthz HTTP \$code (NOT OK)\" ;;
            esac
          '"
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }} "docker ps --format '{{.Names}}\t{{.Ports}}' | grep cargo-hub-stg || true"
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }} "docker compose -p cargo-hub-stg logs --tail=80 api || true"

  deploy-production:
    if: github.event_name == 'workflow_dispatch'
    # Elle tetiklenecek; istersen Required reviewers açabilirsin (Environment ayarından)
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Render .env from prod secrets
        run: |
          cat > .env <<'EOF'
          ASPNETCORE_ENVIRONMENT=Production
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}
          EOF

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          printf "%s" "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }} "echo 'SSH connection OK'"
      - name: Ensure deploy dir exists
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }} "mkdir -p /opt/cargo-hub && chmod 700 /opt/cargo-hub"
      - name: Copy .env to server
        run: |
          scp -o StrictHostKeyChecking=no .env ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }}:/opt/cargo-hub/.env
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }} "chmod 600 /opt/cargo-hub/.env"

      - name: Restart stack
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.SERVER_IP }} \
            "cd /opt/cargo-hub && docker compose -f docker-compose.prod.yml up -d && docker compose ps && docker logs --tail=50 cargo-hub-api-1 || true"
